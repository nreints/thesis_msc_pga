diff --git a/code/convert.py b/code/convert.py
index e33f20f..b0e8c2d 100644
--- a/code/convert.py
+++ b/code/convert.py
@@ -68,57 +68,36 @@ def quat2pos(quat, start_pos):
     Output:
         Converted quaternion to current position
     """
-    # print(start_pos.shape)
-    # print(quat.shape)
-    
+
+
     if len(quat.shape) == 2:
 
         batch, vert_num, dim = start_pos.shape
         out = torch.empty_like(start_pos)
-    #     # print(quat.shape)
-    #     # if not isinstance(quat, np.ndarray):
-    #     #     quat = quat.astype('float64')
-    #     # if not isinstance(start_pos, np.ndarray):
-    #     #     start_pos = start_pos.astype('float64')
-
-
-        # for batch in range(out.shape[0]):
-        #     for vert in range(out.shape[1]):
-        #         out[batch, vert] = own_rotVecQuat(start_pos[batch, vert, :], quat[batch, :4]) + quat[batch, 4:]
 
         rotated_start = fast_rotVecQuat(start_pos, quat[:,:4])
         repeated_trans = torch.repeat_interleave(quat[:, 4:], repeats=8, dim=0)
         out = rotated_start + repeated_trans
         return out.reshape((batch, vert_num, dim))
-    
+
     else:
         batch, vert_num, dim = start_pos.shape
         out = torch.empty((quat.shape[1], batch, vert_num, dim))
-    #     # print(quat.shape)
-    #     # if not isinstance(quat, np.ndarray):
-    #     #     quat = quat.astype('float64')
-    #     # if not isinstance(start_pos, np.ndarray):
-    #     #     start_pos = start_pos.astype('float64')
-
-
-        # for batch in range(out.shape[0]):
-        #     for vert in range(out.shape[1]):
-        #         out[batch, vert] = own_rotVecQuat(start_pos[batch, vert, :], quat[batch, :4]) + quat[batch, 4:]
         for frame in range(quat.shape[1]):
             rotated_start = fast_rotVecQuat(start_pos, quat[:,frame,:4])
             repeated_trans = torch.repeat_interleave(quat[:,frame,4:], repeats=8, dim=0)
             out[frame] = (rotated_start + repeated_trans).reshape((batch, vert_num, dim))
 
-        # print(torch.swapaxes(out, 0, 1).shape)
-        # exit()
         return out
 
-    # print("here", out.shape)
-
 
 
 def log_quat2pos(log_quat, start_pos):
-    print(start_pos, log_quat)
+    print(start_pos.shape, log_quat.shape)
+
+    # (128 x 7), (128 x 8 x 3)
+
+    
     """
 
     Input:
@@ -146,13 +125,16 @@ def log_quat2pos(log_quat, start_pos):
     return quat2pos(quat.append(trans), start_pos)
 
 
-start = [[[1,0,0],[2,0,0],[0.5,0,0]],
-            [[0,1,0],[0,2,0],[0,0.5,0]]]
+# start = [[[1,0,0],[2,0,0],[0.5,0,0]],
+#             [[0,1,0],[0,2,0],[0,0.5,0]]]
+
+# start_nn = [[[1,0,0],[2,0,0],[0.5,0,0]]]
 
-log_quat = [[[1,0,0.7,0.4,0,0,-0.2]],
-            [[0.3,0,0.7,0.4,0,0,-0.3]]]
+# log_quat = [[[1,0,0.7,0.4,0,0,-0.2]],
+#             [[0.3,0,0.7,0.4,0,0,-0.3]]]
+# log_quat_nn = [[[1,0,0.7,0.4,0,0,-0.2]]]
 
-log_quat2pos(log_quat, start)
+# log_quat2pos(log_quat, start)
 
 
 def diff_pos_start2pos(true_preds, start_pos):
diff --git a/code/new_mujoco.py b/code/new_mujoco.py
index 5e96333..901482e 100644
--- a/code/new_mujoco.py
+++ b/code/new_mujoco.py
@@ -77,22 +77,22 @@ def rotVecQuat(v, q):
     mujoco_py.functions.mju_rotVecQuat(res, v, q)
     return res
 
-# testing rotVecQuat vs own_rotVecQuat
-v_big = torch.tensor([[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]],
-                        [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]]])
+# # testing rotVecQuat vs own_rotVecQuat
+# v_big = torch.tensor([[[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]],
+#                         [[1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 0, 0]]])
 
-q_big = torch.tensor([[0.3,  0.87, 0.0, 0.707], 
-                        [0.3,  0.87, 0.0, 0.707]])
+# q_big = torch.tensor([[0.3,  0.87, 0.0, 0.707], 
+#                         [0.3,  0.87, 0.0, 0.707]])
 
-# q_big = torch.repeat_interleave(q_big, repeats=8, dim=0)
+# # q_big = torch.repeat_interleave(q_big, repeats=8, dim=0)
 
 
-v = torch.tensor([1, 0, 0])
-q = torch.tensor([0.3,  0.87, 0.0, 0.707])
+# v = torch.tensor([1, 0, 0])
+# q = torch.tensor([0.3,  0.87, 0.0, 0.707])
 
-print("fast",fast_rotVecQuat(v_big, q_big))
-print("own",own_rotVecQuat(v, q))
-# print("ori", rotVecQuat(v.astype(np.float64), q.astype(np.float64)))
+# print("fast",fast_rotVecQuat(v_big, q_big))
+# print("own",own_rotVecQuat(v, q))
+# # print("ori", rotVecQuat(v.astype(np.float64), q.astype(np.float64)))
 
 def get_vert_coords_quat(sim, obj_id, xyz_local):
     """
diff --git a/code/wandb/latest-run b/code/wandb/latest-run
index 02383cc..0c62d4e 120000
--- a/code/wandb/latest-run
+++ b/code/wandb/latest-run
@@ -1 +1 @@
-run-20220819_150001-2659xw1x
\ No newline at end of file
+run-20220819_154758-r77ua2ny
\ No newline at end of file
