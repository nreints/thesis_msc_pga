diff --git a/code/convert.py b/code/convert.py
index 770c5ab..f731198 100644
--- a/code/convert.py
+++ b/code/convert.py
@@ -61,37 +61,59 @@ def quat2pos(quat, start_pos):
 
     Input:
         quat: Original predictions (quaternion motion)
+            (batch, .., 7)
         start_pos: Start position of simulation
+            (batch, .., 8, 3)
 
     Output:
         Converted quaternion to current position
     """
-    batch, vert_num, dim = start_pos.shape
-    out = torch.empty_like(start_pos)
-#     # print(quat.shape)
-#     # if not isinstance(quat, np.ndarray):
-#     #     quat = quat.astype('float64')
-#     # if not isinstance(start_pos, np.ndarray):
-#     #     start_pos = start_pos.astype('float64')
+    print(start_pos.shape)
+    print(quat.shape)
+    
+    if len(quat.shape) == 2:
 
+        batch, vert_num, dim = start_pos.shape
+        out = torch.empty_like(start_pos)
+    #     # print(quat.shape)
+    #     # if not isinstance(quat, np.ndarray):
+    #     #     quat = quat.astype('float64')
+    #     # if not isinstance(start_pos, np.ndarray):
+    #     #     start_pos = start_pos.astype('float64')
 
-    # for batch in range(out.shape[0]):
-    #     for vert in range(out.shape[1]):
-    #         out[batch, vert] = own_rotVecQuat(start_pos[batch, vert, :], quat[batch, :4]) + quat[batch, 4:]
 
-    rotated_start = fast_rotVecQuat(start_pos, quat[:,:4])
-    # 1024x3
+        # for batch in range(out.shape[0]):
+        #     for vert in range(out.shape[1]):
+        #         out[batch, vert] = own_rotVecQuat(start_pos[batch, vert, :], quat[batch, :4]) + quat[batch, 4:]
 
-    # rot_start = rotated_start.reshape((batch, vert_num, dim))
+        rotated_start = fast_rotVecQuat(start_pos, quat[:,:4])
+        repeated_trans = torch.repeat_interleave(quat[:, 4:], repeats=8, dim=0)
+        out = rotated_start + repeated_trans
+        return out.reshape((batch, vert_num, dim))
     
-    repeated_trans = torch.repeat_interleave(quat[:, 4:], repeats=8, dim=0)
-    out = rotated_start + repeated_trans
-    # print("here", out.shape)
+    else:
+        batch, vert_num, dim = start_pos.shape
+        out = torch.empty((batch, quat.shape[1], vert_num, dim))
+    #     # print(quat.shape)
+    #     # if not isinstance(quat, np.ndarray):
+    #     #     quat = quat.astype('float64')
+    #     # if not isinstance(start_pos, np.ndarray):
+    #     #     start_pos = start_pos.astype('float64')
+
+
+        # for batch in range(out.shape[0]):
+        #     for vert in range(out.shape[1]):
+        #         out[batch, vert] = own_rotVecQuat(start_pos[batch, vert, :], quat[batch, :4]) + quat[batch, 4:]
+        for frame in range(quat.shape[1]):
+            rotated_start = fast_rotVecQuat(start_pos, quat[:,frame,:4])
+            repeated_trans = torch.repeat_interleave(quat[:,frame,4:], repeats=8, dim=0)
+            out[:,frame,:] = (rotated_start + repeated_trans).reshape((batch, vert_num, dim))
+        return out.reshape((batch, vert_num, dim))
 
+    # print("here", out.shape)
 
-    return out.reshape((batch, vert_num, dim))
-    return out.reshape((out.shape[0], -1))
 
+    
 def log_quat2pos(log_quat, start_pos):
     """
 
diff --git a/code/lstm.py b/code/lstm.py
index 072538e..a6ae2ee 100644
--- a/code/lstm.py
+++ b/code/lstm.py
@@ -69,7 +69,7 @@ class MyDataset(data.Dataset):
                 data = data_all[self.data_type]
                 for frame in range(len(data) - (self.n_frames_perentry + 1)):
 
-                    self.start_pos.append(data_all["pos"][0].reshape(-1, 24).squeeze())
+                    self.start_pos.append(data_all["pos"][0])
                     train_end = frame + self.n_frames_perentry
                     self.data.append(data[frame:train_end].reshape(-1, self.n_datap_perframe))
                     self.target.append(data[frame+1:train_end+1].reshape(-1, self.n_datap_perframe))
@@ -224,7 +224,7 @@ config = dict(
     loss_type = "L1",
     loss_reduction_type = "mean",
     optimizer = "Adam",
-    data_type = "pos",
+    data_type = "quat",
     architecture = "lstm",
     train_sims = list(train_sims),
     test_sims = list(test_sims),
diff --git a/code/wandb/latest-run b/code/wandb/latest-run
index e8ce767..da68ac7 120000
--- a/code/wandb/latest-run
+++ b/code/wandb/latest-run
@@ -1 +1 @@
-run-20220815_151207-2i29pl3z
\ No newline at end of file
+run-20220815_162747-2myj4pf9
\ No newline at end of file
